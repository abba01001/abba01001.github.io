<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些碎碎念</title>
      <link href="/2024/11/27/ming-ji-xin-li/"/>
      <url>/2024/11/27/ming-ji-xin-li/</url>
      
        <content type="html"><![CDATA[<h2 id="1-2024-11-27不要写实现代码，要记住实现的思想，站在高度去思考问题"><a href="#1-2024-11-27不要写实现代码，要记住实现的思想，站在高度去思考问题" class="headerlink" title="1.2024-11-27不要写实现代码，要记住实现的思想，站在高度去思考问题"></a>1.2024-11-27不要写实现代码，要记住实现的思想，站在高度去思考问题</h2><h2 id="2-2024-12-17这几周有点颓废，要调整好心态，不要让颓废成为一种习惯"><a href="#2-2024-12-17这几周有点颓废，要调整好心态，不要让颓废成为一种习惯" class="headerlink" title="2.2024-12-17这几周有点颓废，要调整好心态，不要让颓废成为一种习惯"></a>2.2024-12-17这几周有点颓废，要调整好心态，不要让颓废成为一种习惯</h2><h2 id="3-2024-12-17最近又重新玩起了老头环，老头环的魅力真的无法形容，真的是我人生中玩过的最好的游戏之一，希望以后还能有这种游戏"><a href="#3-2024-12-17最近又重新玩起了老头环，老头环的魅力真的无法形容，真的是我人生中玩过的最好的游戏之一，希望以后还能有这种游戏" class="headerlink" title="3.2024-12-17最近又重新玩起了老头环，老头环的魅力真的无法形容，真的是我人生中玩过的最好的游戏之一，希望以后还能有这种游戏"></a>3.2024-12-17最近又重新玩起了老头环，老头环的魅力真的无法形容，真的是我人生中玩过的最好的游戏之一，希望以后还能有这种游戏</h2><h2 id="4-2024-12-17最近开始偏向学习unity底层里的东西，以前是觉得底层的东西没什么用，但是最近发现底层的东西真的很重要，而且很有趣，希望以后能多学一些底层的东西"><a href="#4-2024-12-17最近开始偏向学习unity底层里的东西，以前是觉得底层的东西没什么用，但是最近发现底层的东西真的很重要，而且很有趣，希望以后能多学一些底层的东西" class="headerlink" title="4.2024-12-17最近开始偏向学习unity底层里的东西，以前是觉得底层的东西没什么用，但是最近发现底层的东西真的很重要，而且很有趣，希望以后能多学一些底层的东西"></a>4.2024-12-17最近开始偏向学习unity底层里的东西，以前是觉得底层的东西没什么用，但是最近发现底层的东西真的很重要，而且很有趣，希望以后能多学一些底层的东西</h2><h2 id="5-2024-12-17-最近也在维护自己的C-服务端，发现C-的语法真的很优美，而且C-的异步编程模型也很强大，希望以后能多学一些C-的东西"><a href="#5-2024-12-17-最近也在维护自己的C-服务端，发现C-的语法真的很优美，而且C-的异步编程模型也很强大，希望以后能多学一些C-的东西" class="headerlink" title="5.2024-12-17 最近也在维护自己的C#服务端，发现C#的语法真的很优美，而且C#的异步编程模型也很强大，希望以后能多学一些C#的东西"></a>5.2024-12-17 最近也在维护自己的C#服务端，发现C#的语法真的很优美，而且C#的异步编程模型也很强大，希望以后能多学一些C#的东西</h2><h2 id="6-2024-12-18-今天下定决心把喜欢的那个人都删了，也许是我的心态不行，认识她的这一年一直都是患得患失的，希望以后能重新开始，重新开始，重新开始"><a href="#6-2024-12-18-今天下定决心把喜欢的那个人都删了，也许是我的心态不行，认识她的这一年一直都是患得患失的，希望以后能重新开始，重新开始，重新开始" class="headerlink" title="6.2024-12-18 今天下定决心把喜欢的那个人都删了，也许是我的心态不行，认识她的这一年一直都是患得患失的，希望以后能重新开始，重新开始，重新开始"></a>6.2024-12-18 今天下定决心把喜欢的那个人都删了，也许是我的心态不行，认识她的这一年一直都是患得患失的，希望以后能重新开始，重新开始，重新开始</h2><h2 id="7-2024-12-18-今天突然意识到，越是简单的问题就是越能出错，真就是那句话，简单的问题往往是最难解决的问题，希望以后能多注意细节，多思考问题，细节决定成败"><a href="#7-2024-12-18-今天突然意识到，越是简单的问题就是越能出错，真就是那句话，简单的问题往往是最难解决的问题，希望以后能多注意细节，多思考问题，细节决定成败" class="headerlink" title="7.2024-12-18 今天突然意识到，越是简单的问题就是越能出错，真就是那句话，简单的问题往往是最难解决的问题，希望以后能多注意细节，多思考问题，细节决定成败"></a>7.2024-12-18 今天突然意识到，越是简单的问题就是越能出错，真就是那句话，简单的问题往往是最难解决的问题，希望以后能多注意细节，多思考问题，细节决定成败</h2><h2 id="7-2025-2-7-今年两大flag-1-干掉拖延症-2-选后楼盘"><a href="#7-2025-2-7-今年两大flag-1-干掉拖延症-2-选后楼盘" class="headerlink" title="7.2025-2-7 今年两大flag    1.干掉拖延症   2.选后楼盘"></a>7.2025-2-7 今年两大flag    1.干掉拖延症   2.选后楼盘</h2>]]></content>
      
      
      <categories>
          
          <category> 铭记在心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保持大脑清醒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团结引擎问题记录</title>
      <link href="/2024/11/21/tuanjie-wei-xin-xiao-you-xi/"/>
      <url>/2024/11/21/tuanjie-wei-xin-xiao-you-xi/</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 40px; font-weight: bold;">  切换微信小游戏平台问题记录</div><h3 id="1-切换平台后，hybridclr热更框架不支持。"><a href="#1-切换平台后，hybridclr热更框架不支持。" class="headerlink" title="1.切换平台后，hybridclr热更框架不支持。"></a>1.切换平台后，hybridclr热更框架不支持。</h3><p>将hybridclr插件升至最新版本。升完后需要清理下缓存，将项目里的Library和obj文件夹删掉，再打开项目</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411210004662.png"></p><h3 id="2-编译Generate-All报错。"><a href="#2-编译Generate-All报错。" class="headerlink" title="2.编译Generate/All报错。"></a>2.编译Generate/All报错。</h3><pre class="line-numbers language-none"><code class="language-none">&lt;command line&gt;:12:9: note: previous definition is here #define SLIM_GLOBAL_METADATA_FILE 1        ^ 1 warning and 1 error generated.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.2.1以上团结引擎取消勾选Use Slim Format For global-metadata.dat<img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411210009848.png"></p><p>在HybridCLRData\LocalIl2CppData-WindowsEditor\il2cpp\libil2cpp\il2cpp-config.h找到<br>#define SLIM_GLOBAL_METADATA_FILE 1<br>将其改为#define SLIM_GLOBAL_METADATA_FILE 0</p><h3 id="3-编辑器拓展里默认序列化的Enum报错。"><a href="#3-编辑器拓展里默认序列化的Enum报错。" class="headerlink" title="3.编辑器拓展里默认序列化的Enum报错。"></a>3.编辑器拓展里默认序列化的Enum报错。</h3><pre class="line-numbers language-none"><code class="language-none">public enum CusBuildTarget{    Windows,    Android,    IOS,    WeiXinMiniGame}public CusBuildTarget CurrBuildTarget;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以加上第三方插件的序列化<br>如下:</p><pre class="line-numbers language-none"><code class="language-none">[EnumPaging]public CusBuildTarget CurrBuildTarget;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-WebGl并不支持MySql-MySql写道后台-后台去访问Mysql返回结果给客户端"><a href="#4-WebGl并不支持MySql-MySql写道后台-后台去访问Mysql返回结果给客户端" class="headerlink" title="4.WebGl并不支持MySql(MySql写道后台,后台去访问Mysql返回结果给客户端)"></a>4.WebGl并不支持MySql(MySql写道后台,后台去访问Mysql返回结果给客户端)</h3><h3 id="5-本地http-localhost-8000中测试微信小游戏的-WebGL-访问Cos出现CORS（跨域资源共享）问题"><a href="#5-本地http-localhost-8000中测试微信小游戏的-WebGL-访问Cos出现CORS（跨域资源共享）问题" class="headerlink" title="5.本地http://localhost:8000中测试微信小游戏的 WebGL,访问Cos出现CORS（跨域资源共享）问题"></a>5.本地<a href="http://localhost:8000中测试微信小游戏的">http://localhost:8000中测试微信小游戏的</a> WebGL,访问Cos出现CORS（跨域资源共享）问题</h3><pre class="line-numbers language-none"><code class="language-none">Access to fetch at 'https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/APK/APKVersion.txt' from origin 'http://localhost:8000' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决：</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411210016289.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tuanjie </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建V2Ray服务器（ws+tls+web）</title>
      <link href="/2024/11/16/gong-ju-pian-da-jian-mo-fa/"/>
      <url>/2024/11/16/gong-ju-pian-da-jian-mo-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是搭建V2Ray服务器（ws+tls+web）的完整教程。</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161906081.png"></p><p>如果墙主动访问代理服务器，会发现流量的目的地没有真正的网站，从而识破https流量的目的。</p><p>使用https流量不做掩护，反而增大了IP被墙的概率。因此你需要在V2Ray服务外面加一层真网站做掩护。</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161906358.png"></p><p>这就是V2Ray+ws+tls再加上web的原理。在配置了真实网站之后，只有你自己知道是个代理，在别人看来是个网站（包括墙）。</p><p>反过来说，V2Ray+ws+tls+web也可以看作是自建了一个网站，然后利用这个网站来翻墙。因此，如果你读完本文，不仅能学会V2Ray翻墙，还能学到一点建网站的流程。</p><p>上面“https流量”的正确叫法是“tls流量”，这东西就是你平时浏览网页发出的流量。这里为了方便新手理解，叫做“https流量”。</p><p>安全提示：</p><blockquote><p>如果服务器之前运行过SS，SSR，V2Ray（非TLS）等服务，请确保先停止原来的代理服务，再安装V2Ray。如果不知道怎么停止，请重装VPS（在网页控制面板上点reinstall，不到一分钟就搞定）。翻墙的隐蔽性取决于最薄弱的一环，如果服务器上同时运行其它代理软件，这些代理软件依然会被墙探测到，这种情况下V2Ray+ws+tls+web并不能保证隐蔽性。</p></blockquote><p>自建网站看上去很复杂，其实很简单，只要按照以下步骤：</p><p>1 购买域名&amp;配置域名解析：V2Ray需要域名伪装成真正的网站，因此你需要购买一个域名，并把域名绑定到服务器的IP地址上。</p><p>2 一键填写配置文件：本文已经写好了配置文件，只要把域名，UUID等信息填进去就行了。</p><p>3 一键安装v2ray+nginx</p><p>4 上传配置文件&amp;一键运行</p><p>5 配置客户端</p><p>成功翻墙以后，还可以做以下事情进一步强化：</p><p>可选1. 加固服务器</p><p>可选2. 配置CDN隐藏IP</p><p>可选3. 使用BBR加速</p><p>下面按照以上顺序讲解配置。</p><h2 id="1-购买域名-配置域名解析"><a href="#1-购买域名-配置域名解析" class="headerlink" title="1.购买域名&amp;配置域名解析"></a>1.购买域名&amp;配置域名解析</h2><p>1.1自行百度购买域名，购买的域名例子<a href="http://www.hrw1rdzqa7c5a8u3ibkn.website/">www.hrw1rdzqa7c5a8u3ibkn.website</a></p><p>1.2 注册CloudFlare。</p><p>打开Cloudflare官网，用邮箱注册，如图。注册页面入口<a href="https://dash.cloudflare.com/sign-up">https://dash.cloudflare.com/sign-up</a></p><p>接下来输入刚才购买的域名，注意这里输入的是【二级域名】。所谓二级域名，可以理解为网址去掉www。 比如我的网站的网址是<a href="http://www.hrw1rdzqa7c5a8u3ibkn.website，那么这里应该输入hrw1rdzqa7c5a8u3ibkn.website，如图：">www.hrw1rdzqa7c5a8u3ibkn.website，那么这里应该输入hrw1rdzqa7c5a8u3ibkn.website，如图：</a></p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161910495.png"></p><p>点【Add Site】，把域名交给Cloudflare托管。</p><p>接下来选择套餐，这里选择FREE套餐。</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161911239.png"></p><p>点【Confirm Plan】，进入管理页面，不要关掉页面，接下来配置域名解析。</p><p>1.4 配置域名解析</p><p>配置域名解析分两步：</p><p>配置域名服务器记录（也叫name server，NS记录）</p><p>配置地址解析记录（也叫address，A记录）</p><p>NS记录用来表明由哪台服务器对域名进行解析。从GoDaddy买到域名后，域名是由Godaddy的服务器进行解析的。我们这里把Godaddy的服务器换成Cloudflare的服务器。</p><p>如图是Cloudflare的管理界面，如果你的域名之前有配置域名解析，管理界面会显示之前的记录。暂时不用管这些。 点Continue，修改域名服务器。</p><p>点【Continue with default】</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161911426.png"></p><p>接下来Cloudflare会提示你变更域名服务器，并给出了方法。</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161911288.png"></p><p>画红框的部分就是Cloudflare提供的两个域名服务器，我这里是ns90.domaincontrol.com和ns91.domaincontrol.com， 你看到的的可能和我不一样。</p><p>回到你购买域名服务器的地方，查看域名两个的服务器</p><p>修改位刚才Cloudflare提供的两个域名服务器，我这里是fccp.ns.cloudflare.com和xjp.ns.cloudflare.com， 点击【保存】。</p><p>注意不要有多余的域名服务器，不是CloudFlare提供的就要删除，否则可能会出问题。</p><p>接下来转移域名服务器可能需要几分钟，转移完成后会收到Cloudflare的邮件，可以先等一阵子。</p><p>配置地址解析（A记录） 转移域名服务器完成后，进入cloudflare的首页，点击右上角的【log in】，进入你的账户，如图：</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161914760.png"></p><p>点击买来的域名，进入下一步，如图：</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161915536.png"></p><p>点击【DNS】按钮，进入Cloudflare的DNS管理页面，如下图：</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161915047.png"></p><p>点击【Add record】，一次可以添加一条解析记录.</p><p>这里简单讲解一下，如果不想了解原理，可以跳过这一部分。</p><p>每条域名解析有四个部分：Type，Name，Address，TTL</p><p>Type是域名解析的类型，常见的几种有</p><ul><li>A记录：即地址（Address）记录，用来指定域名的IPv4地址。如果需要将域名指向一个IP地址，就需要添加A记录。举个例子，我们要把域名<a href="http://www.hrw1rdzqa7c5a8u3ibkn.website指向vps的ip地址218.30.118.6,就要添加a记录./">www.hrw1rdzqa7c5a8u3ibkn.website指向VPS的IP地址218.30.118.6，就要添加A记录。</a></li><li>AAAA记录，指定域名的IPv6地址。</li><li>CNAME：即规范名字（Canonical Name）记录，俗称“别名”。如果需要把域名指向另一个域名，就要添加CNAME记录。</li><li>NS：域名服务器记录，如果要把域名交给其他DNS服务器解析，就需要添加NS记录。我们刚才修改的就是NS记录。</li></ul><p>接下来说明每个选项应该填什么，以及为什么这么填：</p><p>Name</p><p>对于A记录，这里介绍三种填法</p><ul><li>www：表示解析带www的域名，即<a href="http://www.hrw1rdzqa7c5a8u3ibkn.website/">www.hrw1rdzqa7c5a8u3ibkn.website</a></li><li>@：直接解析裸域名，即hrw1rdzqa7c5a8u3ibkn.website</li><li><em>：表示泛解析，即匹配其他所有域名</em>.hrw1rdzqa7c5a8u3ibkn.website</li></ul><p>Address</p><p>这里填VPS的IP地址，我这里是218.30.118.6</p><p>TTL</p><p>即 Time To Live，缓存的生存时间。指本地dns缓存解析记录的时间，缓存失效后会再次获取记录。在Cloudflare里，如果配置了CDN，则这里填Auto即可；如果没有配置CDN，可以选择Auto，也可以选择一个大于1小时的值。</p><p>理解了上面的内容以后，接下来添加两条A记录（如果VPS只有IPv6地址则添加AAAA记录）</p><p>点一下云朵，确保云是灰色的（DNS only）。橘色云朵表示此解析记录使用CDN，灰色云朵表示不使用 CDN，点击云朵可以切换。这里不要使用CDN，否则接下来的配置会出问题。</p><ul><li>第一条A记录，name填www，address填服务器IP地址，TTL选择1小时。（表示解析带www的地址）</li><li>第二条A记录，name填@，address填服务器IP地址，TTL选择1小时。（表示解析不带www的裸域名）</li></ul><p>填好之后的正确结果如图：</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161915062.png"></p><p>注意云一定是灰色的。</p><p>检查是否配置成功： 配置完成后点【save】就大功告成了，可以打开windows的powershell，输入</p><p><code>ping www.hrw1rdzqa7c5a8u3ibkn.website</code></p><p>(替换成你的域名)</p><p>Ping一下你的域名，如果能Ping通，就说明域名解析没问题。</p><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h2><p>V2Ray和Nginx的配置文件这里已经写好。你需要做的就是填表格，把配置中标出的地方换成自己的内容。 编辑配置文件可以用Windows记事本，不过推荐使用Notepad++。</p><p>下载地址： <a href="https://notepad-plus-plus.org/downloads/">网页链接，直接下载链接(7.8.4)</a></p><p>2.1 V2Ray配置文件</p><p>V2Ray配置文件如下：</p><pre class="line-numbers language-none"><code class="language-none">{"inbound": {    "protocol": "vmess",    "listen": "127.0.0.1", "port": 9696, "settings": {"clients": [        {"id": "bc0d0a35-0218-4d66-8bcf-f384bd6cf905"}    ]}, "streamSettings": { "network": "ws", "wsSettings": {"path": "/h5j9QKvr64g"}    }},"outbound": {"protocol": "freedom"}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把V2Ray的配置文件另存为config.json</p><p>2.2 Nginx配置文件</p><p>Nginx配置文件如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">#user  nobody;worker_processes  1;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;server {    ### 1:server_name www.abba01001.fun;listen 80;rewrite ^(.*) https://$server_name$1 permanent;if ($request_method  !~ ^(POST|GET)$) { return  501; }autoindex off;server_tokens off;}server {ssl_certificate "C:/Certbot/live/www.abba01001.fun/fullchain.pem";ssl_certificate_key "C:/Certbot/live/www.abba01001.fun/privkey.pem";    ### 4:location /h5j9QKvr64g{proxy_pass http://127.0.0.1:9696;proxy_redirect off;proxy_http_version 1.1;proxy_set_header Upgrade $http_upgrade;proxy_set_header Connection "upgrade";proxy_set_header Host $host;sendfile on;tcp_nopush on;tcp_nodelay on;keepalive_requests 25600;keepalive_timeout 300 300;proxy_buffering off;proxy_buffer_size 8k;}listen 443 ssl http2;server_name $server_name;charset utf-8;ssl_protocols TLSv1.2 TLSv1.3;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK;ssl_prefer_server_ciphers on;ssl_session_cache shared:SSL:60m;ssl_session_timeout 1d;ssl_session_tickets off;ssl_stapling on;ssl_stapling_verify on;resolver 8.8.8.8 8.8.4.4 valid=300s;resolver_timeout 10s;    # Security settingsif ($request_method  !~ ^(POST|GET)$) { return 501; }add_header X-Frame-Options DENY;add_header X-XSS-Protection "1; mode=block";add_header X-Content-Type-Options nosniff;add_header Strict-Transport-Security max-age=31536000 always;autoindex off;server_tokens off;index index.html index.htm index.php;root /usr/share/nginx/html;location ~ .*\.(js|jpg|JPG|jpeg|JPEG|css|bmp|gif|GIF|png)$ { access_log off; }}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把Nginx的配置文件另存为nginx.conf（注意扩展名就是.conf）</p><h2 id="3-上传配置-运行"><a href="#3-上传配置-运行" class="headerlink" title="3.上传配置 &amp; 运行"></a>3.上传配置 &amp; 运行</h2><p>3.1 连接到服务器，安装v2ray+Nginx</p><p>很多新手在买到VPS之后不知所措，其实VPS和游戏账号是一样的，买游戏账号付款之后，店家会私信告诉你两件东西：</p><blockquote><p>用户名，密码</p></blockquote><p>买VPS付款之后，VPS提供商会给你发邮件，告诉你四件东西：</p><blockquote><p>IP地址，密码，登录账号，端口</p></blockquote><p>IP地址和密码一定会有，登录账号如果没说，默认是root。端口如果没说，默认填22.</p><p>拿到登录信息之后，就可以登录服务器了。这里推荐Bitvise SSH，轻量级，但是功能强大。</p><p>下载链接：<a href="https://www.bitvise.com/ssh-client-download">https://www.bitvise.com/ssh-client-download</a></p><p>直接下载链接：<a href="https://dl.bitvise.com/BvSshClient-Inst.exe">https://dl.bitvise.com/BvSshClient-Inst.exe</a></p><p>安装好之后的界面如下图，点红框圈起的下拉菜单，【Initial method】下拉菜单里面选【password】，在【Store encrypted password in profile】选项上打勾。</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161919264.png"></p><p>这里假定我们的IP地址是218.30.118.6，密码是12345，登录账号和密码分别是root和22. 如图：</p><ul><li>【Host】：这里填IP地址</li><li>【Port】：这里填端口，如果没说就是22</li><li>【Username】：这里填用户名，如果没说就是root</li><li>【Password】：登录密码。</li></ul><p>填好之后如下图，点【Log in】就可以登录了。</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161920225.png"></p><p>第一次登录服务器会弹出窗口，问是否要保存密钥，点【Accept and save】继续。</p><p>成功登录之后会弹出两个窗口。</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161920580.png"></p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161920486.png"></p><p>一个是文件浏览窗口，使用方法和Windows资源管理器一样，这里可以浏览服务器上的文件。把电脑中的文件拖拽到这里，就可以把文件上传到服务器。</p><p>另一个黑色的窗口是命令窗口。在电脑上复制一段文字，在这个窗口上右键，就可以把文字粘贴到命令窗口。</p><p>3.2 配置SSL证书</p><p>为了用真正的https流量翻墙，我们的网站必须有合法的SSL证书。可以用自动化工具Certbot申请证书，只要把以下命令复制到命令窗口，依次执行即可。</p><p>这里说的“证书”，实际指的是“数字证书”。当然申请完全是免费的，申请时需要邮箱地址。如有必要，可以使用匿名邮箱。</p><p>(1) 自行百度安装Certbot和python</p><p>(2) 关闭防火墙 </p><p>(3) 申请SSL证书 <code>certbot certonly --standalone --agree-tos -n -d www.●●●●●● -d ●●●●●● -m ▲▲▲@▲▲▲.▲▲▲</code></p><p>第一个-d加一个带www的域名，第二个-d加一个不带www的域名，-m后面加你的电子邮箱。</p><p>注意前后要带空格。</p><p>例子：（域名：<a href="http://www.hrw1rdzqa7c5a8u3ibkn.website%EF%BC%8C%E9%82%AE%E7%AE%B1%EF%BC%9Aaaaaaa@protonmail.com)/">www.hrw1rdzqa7c5a8u3ibkn.website，邮箱：aaaaaa@protonmail.com）</a></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">certbot certonly --standalone --agree-tos -n -d www.hrw1rdzqa7c5a8u3ibkn.website -d hrw1rdzqa7c5a8u3ibkn.website -m aaaaaaa@protonmail.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行这条命令后，如果显示：</p><blockquote><p>IMPORTANT NOTES:</p><ul><li><p>Congratulations! Your certificate and chain have been saved at:</p><p>/etc/letsencrypt/live/<a href="http://www.hrw1rdzqa7c5a8u3ibkn.website/fullchain.pem">www.hrw1rdzqa7c5a8u3ibkn.website/fullchain.pem</a></p><p>Your key file has been saved at:</p><p>/etc/letsencrypt/live/<a href="http://www.hrw1rdzqa7c5a8u3ibkn.website/privkey.pem">www.hrw1rdzqa7c5a8u3ibkn.website/privkey.pem</a></p><p>Your cert will expire on 2020-06-04. To obtain a new or tweaked</p><p>version of this certificate in the future, simply run certbot</p><p>again. To non-interactively renew <em>all</em> of your certificates, run</p><p>“certbot renew”</p></li><li><p>Your account credentials have been saved in your Certbot</p><p>configuration directory at /etc/letsencrypt. You should make a</p><p>secure backup of this folder now. This configuration directory will</p><p>also contain certificates and private keys obtained by Certbot so</p><p>making regular backups of this folder is ideal.</p></li><li><p>If you like Certbot, please consider supporting our work by:</p></li></ul><p>Donating to ISRG / Let’s Encrypt: <a href="https://letsencrypt.org/donate">https://letsencrypt.org/donate</a> Donating to EFF: <a href="https://eff.org/">https://eff.org</a></p></blockquote><p>就表示成功。</p><p>注意：这一步比较容易出错，常见的问题有：</p><ul><li>其它代理占用了80，443端口。解决方法：停止其它代理软件，或重装VPS。</li><li>没有正确配置域名解析。解决方法：ping一下域名，看看能不能正确解析到IP。注意不要打开CDN（云朵点灰）。</li><li>没有关闭防火墙。解决方法：回到（2），关闭防火墙。</li></ul><p>(4) 申请的证书只有三个月期限，记得续期</p><p>3.3 安装V2Ray和Nginx</p><h2 id="4-上传配置文件-运行"><a href="#4-上传配置文件-运行" class="headerlink" title="4 上传配置文件&amp;运行"></a>4 上传配置文件&amp;运行</h2><p>安装好V2Ray和Nginx后，我们终于来到了最后一步。在启动V2Ray之前，需要把之前的配置文件上传</p><p>4.1 将之前写好的config.json覆盖配置文件v2ray目录下。</p><p>nginx.conf覆盖到nginx/conf目录下</p><p>4.2 自行百度启动v2ray和nginx</p><p>配置完成后，可以在浏览器里输入域名网址，如果显示Nginx界面，就说明网址配置成功了！</p><p>接下来要做的是上传一个网页模板，这样别人访问你的服务器就会看到一个真的网站。</p><p>4.3 上传网页模板</p><p>去Google上搜“website template”可以找到很多提供网页模板的网站，随便找一家。网页模板强烈建议用纯英文模板，其中不要包含任何中文内容，否则（可能）会增加网站被墙的概率。下载好以后，解压压缩文件，一路点开，如图，可以看到里面有一个index.html文件(有些是index.htm或index.php)</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161925428.png" alt="img4.3.1"></p><p>把这个文件夹里的所有东西，包括index.html，blog.html，以及css，fonts，img，js几个文件夹，全部上传到 nginx/html/ 目录下面。</p><p>接下来打开网址，这时候可以看到一个真正的网站。</p><h2 id="5-客户端配置"><a href="#5-客户端配置" class="headerlink" title="5 客户端配置"></a>5 客户端配置</h2><p>配置完成后如下图:</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411161925766.png"></p><p>到这一步结束，整个V2Ray翻墙的搭建就结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/11/10/hello-world/"/>
      <url>/2024/11/10/hello-world/</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 40px; font-weight: bold;">  Hello World!</div>## 前言<p>忙活了两天，终于把丢失的博客给搭好了，并构建了一键自动化推送博客的工具，实力也是肉眼可见的变强了。哈哈哈哈哈哈<br>早在一年前，就已经有搭博客的想法了，当时兴冲冲的买了一个域名，想着搭个博客记录下自己平时学习的，可搭完没多久，就放弃了。。。</p><p>哈哈哈哈哈哈哈哈哈，真是三天打鱼两天晒网。</p><p>这次也是下定决心，开始好好记录自己的博客，忙活了两天，刚开始还忘记了这个博客要怎么用来着。</p><p>下面总结一下这两天搭博客的旅程。</p><h2 id="搭建博客之旅"><a href="#搭建博客之旅" class="headerlink" title="搭建博客之旅"></a>搭建博客之旅</h2><h3 id="1-构建本地博客"><a href="#1-构建本地博客" class="headerlink" title="1.构建本地博客"></a>1.构建本地博客</h3><p>网上下载安装Node、Git(Git安装自行百度，安装好之后需要配好环境，不然初始化不了博客)</p><p>cmd输入命令进行安装hexo</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">npm install hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411101817724.png"></p><p>初始化博客</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411101817734.png"></p><p>博客目录结构</p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411101817638.png"></p><p>安装博客所需模块</p><pre class="line-numbers language-none"><code class="language-none">在博客目录下cmd执行npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署到本地</p><pre class="line-numbers language-none"><code class="language-none">在博客目录下cmd执行hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在浏览器输入<a href="http://localhost:4000/%E6%89%93%E5%BC%80%E5%88%9A%E5%88%9A%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E3%80%82%E8%87%B3%E6%AD%A4%E5%B0%B1%E5%AE%8C%E6%88%90%E4%BA%86%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA">http://localhost:4000/打开刚刚搭建的博客网站。至此就完成了一个博客的搭建</a></p><p><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411101817497.png"></p><h3 id="2-将博客部署到GitHubPage"><a href="#2-将博客部署到GitHubPage" class="headerlink" title="2.将博客部署到GitHubPage"></a>2.将博客部署到GitHubPage</h3><p>在github里创建一个=========用户名.github.io的仓库<br><img src="https://abab01001-1318826377.cos.ap-guangzhou.myqcloud.com/BlogData/Image/202411112120698.png"></p><p>然后再刚刚初始化的博客目录下执行</p><pre class="line-numbers language-hexo" data-language="hexo"><code class="language-hexo">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\Administrator\Pictures\BlogImage\202411112125101.png"></p><p>生成public文件夹，public文件夹里的就时静态网站文件。</p><p>有空记录下===</p><h3 id="3-将GitHubPage指向自己的域名"><a href="#3-将GitHubPage指向自己的域名" class="headerlink" title="3.将GitHubPage指向自己的域名"></a>3.将GitHubPage指向自己的域名</h3><h3 id="4-简化操作推送博客网站"><a href="#4-简化操作推送博客网站" class="headerlink" title="4.简化操作推送博客网站"></a>4.简化操作推送博客网站</h3><h3 id="5-CDN加速访问GitHubPage"><a href="#5-CDN加速访问GitHubPage" class="headerlink" title="5.CDN加速访问GitHubPage"></a>5.CDN加速访问GitHubPage</h3><h3 id="6-写博客工具"><a href="#6-写博客工具" class="headerlink" title="6.写博客工具"></a>6.写博客工具</h3><h3 id="7-构建腾讯云Cos图床"><a href="#7-构建腾讯云Cos图床" class="headerlink" title="7.构建腾讯云Cos图床"></a>7.构建腾讯云Cos图床</h3><h3 id="8-给博客网站换皮肤"><a href="#8-给博客网站换皮肤" class="headerlink" title="8.给博客网站换皮肤"></a>8.给博客网站换皮肤</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天先写到这了，有时间在补上去~</p><p>fighting!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法篇</title>
      <link href="/2023/06/23/suan-fa-pian/"/>
      <url>/2023/06/23/suan-fa-pian/</url>
      
        <content type="html"><![CDATA[<div style="color: #cc66ff; font-size: 2rem;">TODO待更新</div><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="（1）二分查找（Binary-Search）"><a href="#（1）二分查找（Binary-Search）" class="headerlink" title="（1）二分查找（Binary Search）"></a>（1）二分查找（Binary Search）</h3><p>时间复杂度：O（log n）<br>空间复杂度：O（1）</p><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><ol><li>在一个有序的数据集合中快速定位目标值，通过每次排除一半的数据范围来逐步缩小查找范围，最终找到目标值或确定目标值不存在于数据集合中</li><li>分治，即将一个大问题分割成两个或多个小问题，在较小的范围内快速解决问题。</li></ol><h3 id="（2）线性查找（Linear-Search）"><a href="#（2）线性查找（Linear-Search）" class="headerlink" title="（2）线性查找（Linear Search）"></a>（2）线性查找（Linear Search）</h3><p>时间复杂度：O（n）<br>空间复杂度：O（1）</p><h4 id="核心思想-1"><a href="#核心思想-1" class="headerlink" title="核心思想"></a>核心思想</h4><ol><li>直接从头到尾遍历数组，简单粗暴，也是最经典最常用的一个</li></ol><h3 id="（3）插值查找（Interpolation-Search）"><a href="#（3）插值查找（Interpolation-Search）" class="headerlink" title="（3）插值查找（Interpolation Search）"></a>（3）插值查找（Interpolation Search）</h3><h4 id="核心思想-2"><a href="#核心思想-2" class="headerlink" title="核心思想"></a>核心思想</h4><h3 id="（4）斐波那契查找（Fibonacci-Search）"><a href="#（4）斐波那契查找（Fibonacci-Search）" class="headerlink" title="（4）斐波那契查找（Fibonacci Search）"></a>（4）斐波那契查找（Fibonacci Search）</h3><h3 id="（5）树表查找（Tree-Search）"><a href="#（5）树表查找（Tree-Search）" class="headerlink" title="（5）树表查找（Tree Search）"></a>（5）树表查找（Tree Search）</h3><h3 id="（6）哈希查找（Hash-Search）"><a href="#（6）哈希查找（Hash-Search）" class="headerlink" title="（6）哈希查找（Hash Search）"></a>（6）哈希查找（Hash Search）</h3><h3 id="（7）递归查找（Recursive-Search）"><a href="#（7）递归查找（Recursive-Search）" class="headerlink" title="（7）递归查找（Recursive Search）"></a>（7）递归查找（Recursive Search）</h3><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="（1）冒泡排序（Bubble-Sort）"><a href="#（1）冒泡排序（Bubble-Sort）" class="headerlink" title="（1）冒泡排序（Bubble Sort）"></a>（1）冒泡排序（Bubble Sort）</h3><h3 id="（2）选择排序（Selection-Sort）"><a href="#（2）选择排序（Selection-Sort）" class="headerlink" title="（2）选择排序（Selection Sort）"></a>（2）选择排序（Selection Sort）</h3><h3 id="（3）插入排序（Insertion-Sort）"><a href="#（3）插入排序（Insertion-Sort）" class="headerlink" title="（3）插入排序（Insertion Sort）"></a>（3）插入排序（Insertion Sort）</h3><h3 id="（4）希尔排序（Shell-Sort）"><a href="#（4）希尔排序（Shell-Sort）" class="headerlink" title="（4）希尔排序（Shell Sort）"></a>（4）希尔排序（Shell Sort）</h3><h3 id="（5）归并排序（Merge-Sort）"><a href="#（5）归并排序（Merge-Sort）" class="headerlink" title="（5）归并排序（Merge Sort）"></a>（5）归并排序（Merge Sort）</h3><h3 id="（6）快速排序（Quick-Sort）"><a href="#（6）快速排序（Quick-Sort）" class="headerlink" title="（6）快速排序（Quick Sort）"></a>（6）快速排序（Quick Sort）</h3><h3 id="（7）堆排序（Heap-Sort）"><a href="#（7）堆排序（Heap-Sort）" class="headerlink" title="（7）堆排序（Heap Sort）"></a>（7）堆排序（Heap Sort）</h3><h3 id="（8）计数排序（Counting-Sort）"><a href="#（8）计数排序（Counting-Sort）" class="headerlink" title="（8）计数排序（Counting Sort）"></a>（8）计数排序（Counting Sort）</h3><h3 id="（9）桶排序（Bucket-Sort）"><a href="#（9）桶排序（Bucket-Sort）" class="headerlink" title="（9）桶排序（Bucket Sort）"></a>（9）桶排序（Bucket Sort）</h3><h3 id="（10）基数排序（Radix-Sort）"><a href="#（10）基数排序（Radix-Sort）" class="headerlink" title="（10）基数排序（Radix Sort）"></a>（10）基数排序（Radix Sort）</h3><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><h2 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h2><h2 id="图算法"><a href="#图算法" class="headerlink" title="图算法"></a>图算法</h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity---网络篇</title>
      <link href="/2023/06/23/unity-wang-luo-pian/"/>
      <url>/2023/06/23/unity-wang-luo-pian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
